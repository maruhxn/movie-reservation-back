// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProviderType {
  LOCAL
  KAKAO
}

model User {
  id         String       @id @default(cuid())
  name       String
  email      String       @unique
  phone      String?
  password   String?
  image      String?
  provider   ProviderType @default(LOCAL)
  snsId      String?
  role       Int          @default(0) @db.SmallInt
  isVerified Boolean      @default(false)
  createdAt  DateTime     @default(now())

  tokens       Token[]
  reservations Reservation[]

  @@index([id, email])
}

model Token {
  id        String   @id @default(uuid())
  payload   String
  createdAt DateTime @default(now())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation {
  id        String @id @default(cuid())
  personAmt Int @db.SmallInt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  movieScheduleId String
  movieSchedule   MovieSchedule @relation(fields: [movieScheduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  seatIds String[]
  seatNames String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, movieScheduleId, seatIds])
}

model MovieSchedule {
  id      String  @id @default(uuid())

  movieId String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  screenId String
  screen   Screen @relation(fields: [screenId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  startTm DateTime
  endTm   DateTime

  reservations Reservation[]
}

model Movie {
  adult             Boolean
  backdrop_path     String?
  id                String   @id
  original_language String
  original_title    String
  overview          String
  popularity        Float    @db.Real
  poster_path       String?
  release_date      String
  title             String   @unique
  vote_average      Float    @db.Real
  vote_count        Int
  genres            String[]
  runtime           Int      @db.SmallInt

  movieSchedules MovieSchedule[]

  @@index([id])
}

model Screen {
  id          String @id @default(cuid())
  screenNum   Int    @unique @db.SmallInt
  seatAmt     Int    @db.SmallInt

  movieSchedules MovieSchedule[]
  seats          Seat[]
}

model Seat {
  id   String @id @default(cuid())
  name String

  screenId String
  screen   Screen @relation(fields: [screenId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
